<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[customize elastic search analyzer]]></title>
    <url>%2F2018%2F10%2F12%2Fcustomize-elastic-search-analyzer%2F</url>
    <content type="text"><![CDATA[先放链接，省的找得麻烦 https://legacy.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details看es，一个链接就够了。在线看非常慢，建议下载pdf 🐷🐷🐷 与本文重点相关的是pdf中的分析、映射两小节。先放总结理解： nosql也都不过如此，hbase mongo es，对比relational db，差别不过是列是可变的 每行的列虽是变化的，但es可以在_mapping中对所有列进行各自的设置 列虽然可变不受限制，但设计时仍然应该将尽可能相同的列放在同一个表下 需求工作中，需要对relational db中表的注释做个搜索功能，便于他人使用。比如：表 my_favorite_fruit ： 需求方小红，负责人小明，comment: 我最爱吃的水果 字段 注释 fruit 水果名称 color 水果颜色 es全文搜索前，会先analyze(分词)然后创建倒排索引。默认的standard analyzer及其他自带的analyzer不会把 my_favorite_fruit 分开，即我搜 favorite 是搜不到的。 我希望全文搜索时，搜索 favorite 可以搜到，搜 水果 可以搜到，但是搜 水 搜不到，并且希望中文的分词更友好（ik ik_max_word）。因此要自定义analyzer。es 的mapping相当于表的metadata，可以对所有的filed（列）配置各自的analyzer 实现 首先建index，同时新建一个自定义analyzer。自定义analyzer的细节见pdf及官网 123456789101112131415161718PUT /awesome_index&#123; &quot;settings&quot;: &#123; &quot;analysis&quot;: &#123; &quot;analyzer&quot;: &#123; &quot;my_analyzer&quot;: &#123; &quot;tokenizer&quot;: &quot;my_tokenizer&quot; &#125; &#125;, &quot;tokenizer&quot;: &#123; &quot;my_tokenizer&quot;: &#123; &quot;type&quot;: &quot;pattern&quot;, &quot;pattern&quot;: &quot;_&quot; &#125; &#125; &#125; &#125;&#125; 安装ik，细节见ik官网。要注意的就是 1) ik的版本要与es的版本完全一致. 2) ik分词器的选用，我用ik_max_word 设置mapping：表名用my_analyzer，中文字段用ik_max_word 1234567891011121314PUT /awesome_index/_mapping/awesome_table&#123; &quot;properties&quot;: &#123; &quot;table_name&quot;:&#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;my_analyzer&quot; &#125;, &quot;comment&quot;: &#123; &quot;type&quot;: &quot;text&quot;, &quot;analyzer&quot;: &quot;ik_max_word&quot;, &quot;search_analyzer&quot;: &quot;ik_max_word&quot; &#125; &#125;&#125; 注意：设置setting和设置_mapping，要在PUT入数据之前 PUT 入数据 12345678910111213141516171819202122PUT /awesome_index/awesome_table/1&#123; &quot;table_name&quot;: &quot;my_favorite_fruit&quot;, &quot;person_in_charge&quot;: &quot;小明&quot;, &quot;comment&quot;: &quot;我最爱吃的水果&quot;, &quot;demand&quot;: &quot;小红&quot;, &quot;detail&quot;: [ &#123; &quot;comment&quot;: &quot;名称&quot;, &quot;partition&quot;: &quot;null&quot;, &quot;col_name&quot;: &quot;fruit&quot;, &quot;example&quot;: &quot;&quot;, &quot;data_type&quot;: &quot;string&quot; &#125;, &#123; &quot;comment&quot;: &quot;颜色&quot;, &quot;partition&quot;: &quot;null&quot;, &quot;col_name&quot;: &quot;color&quot;, &quot;example&quot;: &quot;&quot;, &quot;data_type&quot;: &quot;string&quot; &#125;]&#125; 不足这样就满足需求了。但是，有个问题：detail里的comment没法设置analyzer，还是默认analyzer所以detail中的comment会造成干扰，比如：12345678910111213141516171819202122PUT /awesome_index/awesome_table/2&#123; &quot;table_name&quot;: &quot;my_favorite_vegetables&quot;, &quot;person_in_charge&quot;: &quot;小明&quot;, &quot;comment&quot;: &quot;我最爱吃的蔬菜&quot;, &quot;demand&quot;: &quot;小红&quot;, &quot;detail&quot;: [ &#123; &quot;comment&quot;: &quot;蔬菜名称&quot;, &quot;partition&quot;: &quot;null&quot;, &quot;col_name&quot;: &quot;vegetable&quot;, &quot;example&quot;: &quot;&quot;, &quot;data_type&quot;: &quot;string&quot; &#125;, &#123; &quot;comment&quot;: &quot;蔬菜颜色&quot;, &quot;partition&quot;: &quot;null&quot;, &quot;col_name&quot;: &quot;color&quot;, &quot;example&quot;: &quot;&quot;, &quot;data_type&quot;: &quot;string&quot; &#125;]&#125; 搜索 水，是搜不到 _id=1那条的。但搜索 蔬 ，可以搜到 _id=2这条的。如何解决es对 fields 里array的analyzer呢？悬而未决，有待深入]]></content>
      <tags>
        <tag>elastic search</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十里飘香 桂树成林]]></title>
    <url>%2F2018%2F10%2F09%2Fguilin%2F</url>
    <content type="text"><![CDATA[国庆全家出游桂林]]></content>
      <categories>
        <category>Travel</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Airflow celery executor]]></title>
    <url>%2F2018%2F09%2F20%2Fairflow-celery-executor%2F</url>
    <content type="text"><![CDATA[airflow celery executor 搭建 airflow是一个任务流工具，它基本的local executor已经可以满足大部分的需求，但是不能在web端点击run。因此配置celery executor来提高可用性。 celerycelery是一个Python写的分布式框架 brokerbroker就是一个消息队列来分发消息，celery推荐Rabbitmq，Redis。个人用rabbitmq1234rabbitmqctl add_user rootrabbitmqctl set_user_tags root administratorrabbitmqctl add_vhost airflow rabbitmqctl set_permissions -p airflow root “.” “.” “.*” 直接设为administrator 2333 workerworker就是执行者，可以是分布式的。在一台机器上的话，worker数量不是越多越好，celery建议worker数量不超过总逻辑cpu数的两倍。 backendbackend用来存储worker执行的结果。我个人用postgresql。当然也可以用Redis或mq 在postgre中建一个专用的库，例如取名：celery_backend_for_airflow 避免权限问题，这个pg库的owner直接就是一个superuser，例如bowen 2333 airflow celery配置在airflow.cfg中的配置就很方便 配broker，就改下 broker_url，例如 1broker_url = amqp://root:111111@localhost:5672/airflow 配backend，就改下 celery_result_backend，格式 1celery_result_backend = db+postgresql://bowen:111111@localhost/celery_backend_for_airflow 然后启动worker celery默认不能以root用户启动worker，启动airflow worker就有了问题： airflow的worker实际就是celery的worker，root下直接 # airflow worker 会报错。 也不能以普通用户运行worker airflow worker 要写入airflow的log，但是普通用户运行的worker没有权限写入以root生成的log文件。 因为log总要生成新的，所以不能通过手动改所以log文件的权限来解决。 所以就有两个解决方法： 1) 修改airflow生成log部分的代码，使之o+w。但是说不定改了这个权限后还有别的权限问题。 2) 修改airflow调用celery的部分，使之可以root运行 参照其他博文，用2，在airflow包里的xxxx/site-packages/airflow/executors里的celery_executor.py加上 12from celery import platformsplatforms.C_FORCE_ROOT = True 之后一顿重启，基本就ok了。有问题可以直接在rabbitmq或者pg中看是哪步出了问题。启动worker可以指定pid file，并且Daemon1airflow worker --pid ~/airflow/airflow-worker.pid -D]]></content>
      <tags>
        <tag>airflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[About Hexo]]></title>
    <url>%2F2018%2F09%2F20%2Fabout-hexo%2F</url>
    <content type="text"><![CDATA[hexo-backup记录一下搭建过程中的要注意的点，以及hexo配置，主要是./下和./themes/next/下的两个_config.yml文件。这两个文件在以下就以./和./themes/next/来区分。hexo 是基于nodejs的，我的node: v10.10.0, npm: 6.4.1 安装使用见hexo官网：[https://hexo.io/zh-cn/] deploy 配置 deploy 注意按官网介绍，需要安装插件 1$ npm install hexo-deployer-git --save 托管到 GitHub GitHub 可以建一个特殊的repo来托管网站：repo名字按规则来建 username.github.io。把网站文件push到这个repo下，然后访问https://b0o0wen.github.io/ 在本地在 ./_config.yml最后添加： 1234deploy: type: git repo: git@github.com:b0o0wen/b0o0wen.github.io.git branch: master 注意冒号后一定要有个空格 appearance 配置 主题配置主题使用next: https://github.com/iissnan/hexo-theme-next 我的next版本是 v5.1.2 1$ git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next clone next之后，在./themes/next/下有了另一个_config.yml文件主要有： menu：如tags, categories等。在menu下新建一行xxxx，hexo就会在网站上生成一个名为xxxx的tab，对于常用的menu，hexo还会自带图标。需要注意的是要： 1hexo new page &apos;xxxx&apos; 来在./source/xxxx建立一个index.md，即点击该tab对应的页面。对于tags，在该index.md中修改这个页面的type为tags，hexo就给你生成一个tags页面，还自带词云效果 scheme：hexo共四个scheme avatar：头像的默认根目录在 ./themes/next/source/ 下，支持各种图片格式 social：hexo自带图标 背景图及透明度在./themes/next/source/css/ 下有个_custom文件夹，这里可以修改custom.styl来定制css 12345678910111213141516body &#123;// background:url(https://source.unsplash.com/random/1600x900); background:url(/images/background_leaf.jpg) //背景图片，默认根目录在 ./themes/next/source/ 下 background-repeat: no-repeat; background-attachment:fixed; background-position:50% 50%;&#125;//页面上menu那部分class是 .header-inner.header-inner &#123; opacity: 0.88&#125;.main-inner &#123; opacity: 0.9;&#125; 使用技巧摘要写了一篇新post后，web上会默认显示全文，为了只显示部分摘要 可以在文章的md中添加 1&lt;!--more--&gt; 在任意位置截取摘要。 可以修改配置 123auto_excerpt: enable: true length: 150 来截取固定摘要。推荐第一种。 图片 使用hexo的资源文件夹，修改./_config.yml: 1post_asset_folder: true 然后new ‘xxxx’时会有一个同名文件夹 ‘xxxx’，图片example.jpg放其下。 md中用图片时有两种方式： md的语法 1![This is an example image](example.jpg) 方括号中是图片说明，图片名example.jpg前不需要加任何路径，自动相对到文件夹’xxxx’下。这样，图片可以在文章中显示，但是没法在首页显示。因为在首页的路径下，找不到这个图片 hexo的私有语法：“标签” 1&#123;% asset_img example.jpg This is an example image %&#125; asset_img声明是图片资源，同样不用加路径。这样不截断的话，可以在文章和首页同时显示图片 在添加或修改了一篇post后，hexo g -d 之前，最好 1hexo clean 这会清空public文件夹。如果不clean，而你又恰好修改或删除了一个tag或者category，那么例如在tag页面可能出现：“3 tags in tatol”，但是下边具体的tag只有2个]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F09%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
